{"version":3,"sources":["nola_fountain.jpg","Header.js","MainHeader.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Item","Link","Component","MainHeader","Styled","icon","faGithub","faLinkedin","faEnvelope","styled","div","img","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,2C,gOCiC5BC,E,iLA5BX,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,iBAEA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,qBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUR,KAAK,KAAf,SAKF,kBAACK,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUR,KAAK,yBAAf,mB,GAjBKS,a,+3BCKfC,E,iLAEF,OACE,kBAACC,EAAD,KACE,0BAAML,UAAU,SACd,wBAAIA,UAAU,SAAd,mBAEA,6BACA,wBAAIA,UAAU,oBAAd,kEAIA,yBAAKA,UAAU,YACb,uBAAGA,UAAU,QAAQN,KAAK,6BACxB,kBAAC,IAAD,CAAiBY,KAAMC,OAEzB,uBAAGP,UAAU,QAAQN,KAAK,mDACxB,kBAAC,IAAD,CAAiBY,KAAME,OAEzB,uBAAGR,UAAU,QAAQN,KAAK,4BACxB,kBAAC,IAAD,CAAiBY,KAAMG,c,GApBZN,aA6BnBE,EAASK,IAAOC,IAAV,IACiBC,KA2CdR,I,4FC5ETS,E,iLAEF,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,W,GAJWV,aAUbE,EAASK,IAAOC,IAAV,KAGGE,ICFAC,MATf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.90c5c614.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nola_fountain.cb22853a.jpg\";","import React, { Component } from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar bg='light' expand='lg'>\n          <Navbar.Brand href='#home'>Andrew T. Lim</Navbar.Brand>\n\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\n          <Navbar.Collapse id='basic-navbar-nav '>\n            <Nav className='ml-auto'>\n              <Nav.Item>\n                <Nav.Link href='#'>Home</Nav.Link>\n              </Nav.Item>\n              {/* <Nav.Item>\n                <Nav.Link href='#about'>About</Nav.Link>\n              </Nav.Item> */}\n              <Nav.Item>\n                <Nav.Link href='http://bit.ly/2InVtnY'>Resume</Nav.Link>\n              </Nav.Item>\n              {/* <Nav.Item>\n                <Nav.Link href='#contact'>Contact</Nav.Link>\n              </Nav.Item> */}\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport img from \"./nola_fountain.jpg\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub, faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\nimport { faEnvelope } from \"@fortawesome/free-solid-svg-icons\";\n\nclass MainHeader extends Component {\n  render() {\n    return (\n      <Styled>\n        <span className='title'>\n          <h1 className='name '>Hi! I am Andrew</h1>\n\n          <hr />\n          <h6 className='mini-description'>\n            Computer Science and Data Science student at Purdue University\n          </h6>\n\n          <div className='icon-row'>\n            <a className='icons' href='https://github.com/lim243'>\n              <FontAwesomeIcon icon={faGithub} />\n            </a>\n            <a className='icons' href='https://linkedin.com/in/andrew-t-lim-a36177149/'>\n              <FontAwesomeIcon icon={faLinkedin} />\n            </a>\n            <a className='icons' href='mailto:lim243@purdue.edu'>\n              <FontAwesomeIcon icon={faEnvelope} />\n            </a>\n          </div>\n        </span>\n      </Styled>\n    );\n  }\n}\n\nconst Styled = styled.div`\n  // background-image: url(${img});\n  // background-size: cover;\n  // background-repeat: no-repeat;\n  // background-position: center center;\n  // background-attachment: fixed;\n  background-color: #D7CEC7;\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n\n  .icon-row {\n    width: 100%;\n  }\n\n  .name {\n    font-family: Cabin;\n    font-weight: bold;\n  }\n\n  .mini-description {\n    font-size: 20px;\n    font-family: Cabin;\n    letter-spacing: 2px;\n    line-height: 1.3em;\n    color: black;\n  }\n\n  .title {\n    margin: auto;\n    padding: 2.5rem;\n    border-radius: 2rem\n    background-color: white;\n  }\n\n  .icons {\n    color: black;\n    padding: 0.1em;\n    font-size: 25px;\n    text-align: center;\n    margin: 5px;\n  }\n`;\n\nexport default MainHeader;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport MainHeader from \"./MainHeader\";\n\nclass Main extends Component {\n  render() {\n    return (\n      <Styled>\n        <MainHeader />\n      </Styled>\n    );\n  }\n}\n\nconst Styled = styled.div`\n  height: 100%;\n`;\nexport default Main;\n","import React from \"react\";\n\nimport \"./App.css\";\n\nimport Header from \"./Header\";\nimport Main from \"./Main\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}